// Test the server cookie is generated by aes64 encoding of remote and local
// IP addreses with a specific master key in net.ipv4.tcp_fastopen_key.
//
// Note: there are other nearly identical simpl*.pkt tests. The differences
// are the local or remote IP addresses
//
--local_ip=192.168.0.3
--remote_ip=10.248.0.3

// Enable server Fast Open capability
// Set master key to a0bf63f7-ed803d81-cd641d30-cebc4a90
`../../../common/defaults.sh
sysctl -q \
  net.ipv4.tcp_fastopen=0x30403 \
  net.ipv4.tcp_fastopen_key=a0bf63f7-ed803d81-cd641d30-cebc4a90`

// Initialize connection
    0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
   +0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
   +0 bind(3, ..., ...) = 0
   +0 listen(3, 1) = 0

   +0 < S 78932912:78932912(0) win 10000 <mss 1012,FO,nop,nop,sackOK,TS val 1 ecr 0,nop,wscale 7>
// Test the cookie is as expected by encoding both IPs w/ key
   +0 > S. 0:0(0) ack 78932913 <mss 1460,sackOK,TS val 10000 ecr 1,nop,wscale 8, FO 76d2c1c530f51f79,nop,nop>
  +.1 < . 1:1(0) ack 1 win 257 <nop,nop,TS val 2 ecr 10000>
   +0 accept(3, ..., ...) = 4
   +0 close(4) = 0
   +0 > F. 1:1(0) ack 1 <nop,nop,TS val 10001 ecr 2>
  +.1 < F. 1:1(0) ack 2 win 257 <nop,nop,TS val 3 ecr 10001>
   +0 > . 2:2(0) ack 2 <nop,nop,TS val 10002 ecr 3>
   +0 close(3) = 0

// re-start the listen to test the fast open b/c tcptest does not support
// multi-conn on server side (yet)
  +.1 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
   +0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
   +0 bind(3, ..., ...) = 0
   +0 listen(3, 1) = 0

 +.05 < S 252334000:252335000(1000) win 10000 <mss 1012,nop,nop,FO 76d2c1c530f51f79,sackOK,TS val 10 ecr 0,nop,wscale 7>
   +0 > S. 0:0(0) ack 252335001 <mss 1460,sackOK,TS val 100000 ecr 10,nop,wscale 8>
   +0 accept(3, ..., ...) = 4
   +0 read(4, ..., 65536) = 1000
 +.01 write(4, ..., 15000) = 15000
// Note that we received an initial window of 10000 in the SYN packet
// After commit 0dbd7ff3ac5017a46033a9d0a87a8267d69119d9 ("tcp: initialize max window for a new fastopen socket")
// we properly send two TSO packets of 5000 bytes, including a PSH flag.
   +0 > P. 1:5001(5000) ack 1001 <nop,nop,TS val 100001 ecr 10>
   +0 > P. 5001:10001(5000) ack 1001 <nop,nop,TS val 100001 ecr 10>
  +.1 < . 1001:1001(0) ack 1 win 257 <nop,nop,TS val 20 ecr 100000>
+.005 < . 1001:1001(0) ack 2001 win 257 <nop,nop,TS val 30 ecr 100001>
