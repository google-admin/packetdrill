//
// Send an ICMP host_unreachable pkt to a pending SYN_RECV req.
//
// If it's a TFO req, the ICMP error will cause it to switch
// to TCP_CLOSE state but remains in the acceptor queue.
//
--remote_ip=192.0.2.1
--local_ip=192.168.0.1
`../../../common/defaults.sh`

    0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
  +.1 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
   +0 bind(3, ..., ...) = 0
   +0 listen(3, 1) = 0
  +.1 < S 0:10(10) win 32792 <mss 1460,sackOK,nop,nop,FO 3021b9d889017eeb,nop,nop>
   +0 > S. 0:0(0) ack 11 <mss 1460,nop,nop,sackOK>

// Out-of-window icmp is ignored but accounted.
  +.1 `nstat > /dev/null`
   +0 < icmp unreachable [5000:6000(1000)]
   +0 `nstat | grep TcpExtOutOfWindowIcmps > /dev/null`

// Valid ICMP unreach.
   +0 < icmp unreachable host_unreachable [0:10(10)]

   +0 accept(3, ..., ...) = 4
   +0 %{ assert (tcpi_options & TCPI_OPT_SYN_DATA) != 0, tcpi_options }%
// Unlike the non-TFO case, the req is still there to be accepted.
   +0 read(4, ..., 512) = 10
// The 1st read will succeed and return the data in SYN
   +0 read(4, ..., 512) = -1 EHOSTUNREACH(No route to host)
// The 2nd read will fail.
   +0 write(4, ..., 100) = -1 EPIPE(Broken Pipe)
// But is no longer writable because it's in TCP_CLOSE state.
  +.1 < . 1:1(0) ack 1 win 32792
// inbound pkt will trigger RST because the socket has been moved
// off the TCP hash tables.
   +0 > R 1:1(0)
