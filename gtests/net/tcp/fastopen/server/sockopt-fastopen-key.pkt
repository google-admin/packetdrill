// Test the server cookie is generated by aes64 encoding of remote and local
// IP addreses with a master key specified via sockopt TCP_FASTOPEN_KEY
//
--local_ip=192.168.0.2
--remote_ip=10.248.0.2

`../../common/defaults.sh
 ../../common/set_sysctls.py /proc/sys/net/ipv4/tcp_fastopen_key=00000000-00000000-00000000-00000000`

    0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
   +0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
// Set a key of a0bf63f7-ed803d81-cd641d30-cebc4a90 (big endian).
// This would produce a cookie of 00abaaabe8e954c2 like many other
// tests (which the same key but set via sysctl).
   +0 setsockopt(3, SOL_TCP, TCP_FASTOPEN_KEY,
                 "\xf7\x63\xbf\xa0\x81\x3d\x80\xed\x30\x1d\x64\xcd\x90\x4a\xbc\xce", 16) = 0
   +0 bind(3, ..., ...) = 0
   +0 listen(3, 1) = 0

   +0 < S 1428932:1428942(10) win 10000 <mss 1012,FOEXP,sackOK,TS val 1 ecr 0,nop,wscale 7>
   +0 > S. 0:0(0) ack 1428933 <mss 1460,sackOK,TS val 10000 ecr 1,nop,wscale 8, FOEXP 00abaaabe8e954c2>
   +0 < . 1:1(0) ack 1 win 257 <nop,nop,TS val 2 ecr 10000>
   +0 accept(3, ..., ...) = 4
   +0 close(3) = 0
   +0 %{ assert (tcpi_options & TCPI_OPT_SYN_DATA) == 0, tcpi_options }%
   +0 close(4) = 0
   +0 > F. 1:1(0) ack 1 <nop,nop,TS val 10001 ecr 2>
   +0 < F. 1:1(0) ack 2 win 257 <nop,nop,TS val 3 ecr 10001>
   +0 > . 2:2(0) ack 2 <nop,nop,TS val 10002 ecr 3>

// re-start the listener
  +.1 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
   +0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
   +0 bind(3, ..., ...) = 0
   +0 listen(3, 1) = 0
// Test setting the key in the listen state, and produces an identical cookie
   +0 setsockopt(3, SOL_TCP, TCP_FASTOPEN_KEY,
                 "\xf7\x63\xbf\xa0\x81\x3d\x80\xed\x30\x1d\x64\xcd\x90\x4a\xbc\xce", 16) = 0

 +.05 < S 6814000:6815000(1000) win 10000 <mss 1012,FOEXP 00abaaabe8e954c2,sackOK,TS val 10 ecr 0,nop,wscale 7>
   +0 > S. 0:0(0) ack 6815001 <mss 1460,sackOK,TS val 10000 ecr 10,nop,wscale 8>
   +0 accept(3, ..., ...) = 4
   +0 close(3) = 0
   +0 %{ assert (tcpi_options & TCPI_OPT_SYN_DATA) != 0, tcpi_options }%
   +0 < . 1001:1001(0) ack 1 win 257 <nop,nop,TS val 12 ecr 10000>
   +0 read(4, ..., 8192) = 1000
   +0 close(4) = 0
   +0 > F. 1:1(0) ack 1001 <nop,nop,TS val 10101 ecr 12>
   +0 < F. 1001:1001(0) ack 2 win 257 <nop,nop,TS val 112 ecr 10101>
   +0 > . 2:2(0) ack 1002 <nop,nop,TS val 10102 ecr 112>

// re-start the listener
  +.1 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
   +0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
   +0 bind(3, ..., ...) = 0
   +0 listen(3, 1) = 0
// Test invalid key length (must be 16 bytes)
   +0 setsockopt(3, SOL_TCP, TCP_FASTOPEN_KEY, "", 0) = -1 (Invalid Argument)
   +0 setsockopt(3, SOL_TCP, TCP_FASTOPEN_KEY, "", 3) = -1 (Invalid Argument)

// Previous cookie won't be accepted b/c this listener uses the global key (0-0-0-0)
 +.05 < S 6814000:6815000(1000) win 10000 <mss 1012,FOEXP 00abaaabe8e954c2,sackOK,TS val 10 ecr 0,nop,wscale 7>
   +0 > S. 0:0(0) ack 6814001 <mss 1460,sackOK,TS val 10000 ecr 10,nop,wscale 8, FOEXP 93b7aa4f550f8a1a>

`/tmp/sysctl_restore_${PPID}.sh`
