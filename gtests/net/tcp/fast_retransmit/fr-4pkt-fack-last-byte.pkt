// Test that RACK does not enter Fast Recovery with just the
// last byte of the 4th MSS SACKed

// Set up config.
`../common/defaults.sh`

// Establish a connection.
    0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
   +0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
   +0 bind(3, ..., ...) = 0
   +0 listen(3, 1) = 0

  +.1 < S 0:0(0) win 32792 <mss 1000,sackOK,nop,nop,nop,wscale 7>
   +0 > S. 0:0(0) ack 1 <mss 1460,nop,nop,sackOK,nop,wscale 8>
  +.1 < . 1:1(0) ack 1 win 320
   +0 accept(3, ..., ...) = 4

// Send 4 data segments. 1, 2, and 3 are lost.
   +0 write(4, ..., 4000) = 4000
   +0 > P. 1:4001(4000) ack 1

// Get a SACK for the last byte we transmitted.
  +.1 < . 1:1(0) ack 1 win 320 <sack 4000:4001,nop,nop>

// TLP.
  +.1~+.105 > P. 3001:4001(1000) ack 1

// RTO = RTT + 200ms = 300ms
  +.3~+.310 > . 1:1001(1000) ack 1

// ACK arrives for the RTO-retransmitted segment.
  +.5 < . 1:1(0) ack 1001 win 320 <sack 4000:4001,nop,nop>
   +0 > . 1001:3001(2000) ack 1

  +.1 < . 1:1(0) ack 3001 win 320 <sack 4000:4001,nop,nop>
   +0 > P. 3001:4001(1000) ack 1

// Receiver ACKs all data.
  +.1 < . 1:1(0) ack 4001 win 257

// Clean up.
   +0 close(4) = 0
   +0 > F. 4001:4001(0) ack 1
  +.1 < F. 1:1(0) ack 4002 win 257
   +0 > . 4002:4002(0) ack 2
